"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStore = void 0;
const tslib_1 = require("tslib");
const mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const node_path_1 = tslib_1.__importDefault(require("node:path"));
class FileStore {
    constructor(path) {
        if (!node_fs_1.default.existsSync(path)) {
            mkdirp_1.default.sync(path);
        }
        this.__internal__path = path;
    }
    all(fn) {
        node_fs_1.default
            .readdirSync(this.__internal__path)
            .filter((key) => !['.', '..', '.DS_Store'].includes(key))
            .forEach((key) => {
            const value = this._readKey(key);
            value?.address && fn(key, value);
        });
    }
    get(key, fn) {
        const value = this._readKey(key);
        if (!value?.address) {
            throw new Error(`Invalid JSON found for ${key}`);
        }
        fn(value);
    }
    remove(key, fn) {
        node_fs_1.default.unlinkSync(this._getPath(key));
        fn && fn();
    }
    set(key, value, fn) {
        node_fs_1.default.writeFileSync(this._getPath(key), Buffer.from(JSON.stringify(value), 'utf-8'));
        fn && fn();
    }
    _getPath(key) {
        return node_path_1.default.join(this.__internal__path, key);
    }
    _readKey(key) {
        try {
            return JSON.parse(node_fs_1.default.readFileSync(this._getPath(key)).toString('utf-8'));
        }
        catch (error) {
            console.error(error);
        }
        return undefined;
    }
}
exports.FileStore = FileStore;
