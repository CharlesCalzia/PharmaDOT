"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.settings = exports.Settings = void 0;
const tslib_1 = require("tslib");
const eventemitter3_1 = require("eventemitter3");
const store_1 = tslib_1.__importDefault(require("store"));
const util_1 = require("@polkadot/util");
const index_js_1 = require("./defaults/index.js");
function withDefault(options, option, fallback) {
    const _option = option || fallback;
    return options.some(({ value }) => value === _option)
        ? _option
        : fallback;
}
class Settings {
    constructor() {
        const settings = store_1.default.get('settings') || {};
        this.__internal__emitter = new eventemitter3_1.EventEmitter();
        // will become deprecated for supporting substrate connect light clients. apiType structure should be used instead
        this.__internal__apiUrl = (typeof settings.apiUrl === 'string' && settings.apiUrl) || (util_1.hasProcess && process.env && process.env.WS_URL) || index_js_1.ENDPOINT_DEFAULT.value;
        this.__internal__apiType = { param: this.__internal__apiUrl, type: 'json-rpc' };
        this.__internal__camera = withDefault(index_js_1.CAMERA, settings.camera, index_js_1.CAMERA_DEFAULT);
        this.__internal__ledgerConn = withDefault(index_js_1.LEDGER_CONN, settings.ledgerConn, index_js_1.LEDGER_CONN_DEFAULT);
        this.__internal__i18nLang = settings.i18nLang || index_js_1.LANGUAGE_DEFAULT;
        this.__internal__icon = settings.icon || index_js_1.ICON_DEFAULT;
        this.__internal__locking = settings.locking || index_js_1.LOCKING_DEFAULT;
        this.__internal__metadataUp = withDefault(index_js_1.METADATA_UP, settings.storage, index_js_1.METADATA_UP_DEFAULT);
        this.__internal__notification = settings.notification || index_js_1.NOTIFICATION_DEFAULT;
        this.__internal__prefix = (0, util_1.isUndefined)(settings.prefix) ? index_js_1.PREFIX_DEFAULT : settings.prefix;
        this.__internal__storage = withDefault(index_js_1.STORAGE, settings.storage, index_js_1.STORAGE_DEFAULT);
        this.__internal__uiMode = settings.uiMode || index_js_1.UIMODE_DEFAULT;
        this.__internal__uiTheme = settings.uiTheme || index_js_1.UITHEME_DEFAULT;
    }
    get camera() {
        return this.__internal__camera;
    }
    get apiType() {
        return this.__internal__apiType;
    }
    get apiUrl() {
        return this.__internal__apiUrl;
    }
    get i18nLang() {
        return this.__internal__i18nLang;
    }
    get icon() {
        return this.__internal__icon;
    }
    get notification() {
        return this.__internal__notification;
    }
    get ledgerConn() {
        return this.__internal__ledgerConn;
    }
    get locking() {
        return this.__internal__locking;
    }
    get metadataUp() {
        return this.__internal__metadataUp;
    }
    get prefix() {
        return this.__internal__prefix;
    }
    get storage() {
        return this.__internal__storage;
    }
    get uiMode() {
        return this.__internal__uiMode;
    }
    get uiTheme() {
        return this.__internal__uiTheme;
    }
    get availableCamera() {
        return index_js_1.CAMERA;
    }
    get availableCryptos() {
        return index_js_1.CRYPTOS;
    }
    get availableCryptosEth() {
        return index_js_1.CRYPTOS_ETH;
    }
    get availableCryptosLedger() {
        return index_js_1.CRYPTOS_LEDGER;
    }
    get availableIcons() {
        return index_js_1.ICONS;
    }
    get availableLedgerConn() {
        return index_js_1.LEDGER_CONN;
    }
    get availableLocking() {
        return index_js_1.LOCKING;
    }
    get availableMetadataUp() {
        return index_js_1.METADATA_UP;
    }
    get availableNodes() {
        return index_js_1.ENDPOINTS;
    }
    get availablePrefixes() {
        return index_js_1.PREFIXES;
    }
    get availableStorage() {
        return index_js_1.STORAGE;
    }
    get availableUIModes() {
        return index_js_1.UIMODES;
    }
    get availableUIThemes() {
        return index_js_1.UITHEMES;
    }
    get() {
        return {
            apiType: this.__internal__apiType,
            apiUrl: this.__internal__apiUrl,
            camera: this.__internal__camera,
            i18nLang: this.__internal__i18nLang,
            icon: this.__internal__icon,
            ledgerConn: this.__internal__ledgerConn,
            locking: this.__internal__locking,
            metadataUp: this.__internal__metadataUp,
            notification: this.__internal__notification,
            prefix: this.__internal__prefix,
            storage: this.__internal__storage,
            uiMode: this.__internal__uiMode,
            uiTheme: this.__internal__uiTheme
        };
    }
    set(settings) {
        this.__internal__apiType = settings.apiType || this.__internal__apiType;
        this.__internal__apiUrl = settings.apiUrl || this.__internal__apiUrl;
        this.__internal__camera = settings.camera || this.__internal__camera;
        this.__internal__ledgerConn = settings.ledgerConn || this.__internal__ledgerConn;
        this.__internal__i18nLang = settings.i18nLang || this.__internal__i18nLang;
        this.__internal__icon = settings.icon || this.__internal__icon;
        this.__internal__locking = settings.locking || this.__internal__locking;
        this.__internal__metadataUp = settings.metadataUp || this.__internal__metadataUp;
        this.__internal__notification = settings.notification || this.__internal__notification;
        this.__internal__prefix = (0, util_1.isUndefined)(settings.prefix) ? this.__internal__prefix : settings.prefix;
        this.__internal__storage = settings.storage || this.__internal__storage;
        this.__internal__uiMode = settings.uiMode || this.__internal__uiMode;
        this.__internal__uiTheme = settings.uiTheme || this.__internal__uiTheme;
        const newValues = this.get();
        store_1.default.set('settings', newValues);
        this.__internal__emitter.emit('change', newValues);
    }
    on(type, cb) {
        this.__internal__emitter.on(type, cb);
    }
}
exports.Settings = Settings;
exports.settings = new Settings();
