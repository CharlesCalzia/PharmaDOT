import { EventEmitter } from 'eventemitter3';
import store from 'store';
import { hasProcess, isUndefined } from '@polkadot/util';
import { CAMERA, CAMERA_DEFAULT, CRYPTOS, CRYPTOS_ETH, CRYPTOS_LEDGER, ENDPOINT_DEFAULT, ENDPOINTS, ICON_DEFAULT, ICONS, LANGUAGE_DEFAULT, LEDGER_CONN, LEDGER_CONN_DEFAULT, LOCKING, LOCKING_DEFAULT, METADATA_UP, METADATA_UP_DEFAULT, NOTIFICATION_DEFAULT, PREFIX_DEFAULT, PREFIXES, STORAGE, STORAGE_DEFAULT, UIMODE_DEFAULT, UIMODES, UITHEME_DEFAULT, UITHEMES } from './defaults/index.js';
function withDefault(options, option, fallback) {
    const _option = option || fallback;
    return options.some(({ value }) => value === _option)
        ? _option
        : fallback;
}
export class Settings {
    constructor() {
        const settings = store.get('settings') || {};
        this.__internal__emitter = new EventEmitter();
        // will become deprecated for supporting substrate connect light clients. apiType structure should be used instead
        this.__internal__apiUrl = (typeof settings.apiUrl === 'string' && settings.apiUrl) || (hasProcess && process.env && process.env.WS_URL) || ENDPOINT_DEFAULT.value;
        this.__internal__apiType = { param: this.__internal__apiUrl, type: 'json-rpc' };
        this.__internal__camera = withDefault(CAMERA, settings.camera, CAMERA_DEFAULT);
        this.__internal__ledgerConn = withDefault(LEDGER_CONN, settings.ledgerConn, LEDGER_CONN_DEFAULT);
        this.__internal__i18nLang = settings.i18nLang || LANGUAGE_DEFAULT;
        this.__internal__icon = settings.icon || ICON_DEFAULT;
        this.__internal__locking = settings.locking || LOCKING_DEFAULT;
        this.__internal__metadataUp = withDefault(METADATA_UP, settings.storage, METADATA_UP_DEFAULT);
        this.__internal__notification = settings.notification || NOTIFICATION_DEFAULT;
        this.__internal__prefix = isUndefined(settings.prefix) ? PREFIX_DEFAULT : settings.prefix;
        this.__internal__storage = withDefault(STORAGE, settings.storage, STORAGE_DEFAULT);
        this.__internal__uiMode = settings.uiMode || UIMODE_DEFAULT;
        this.__internal__uiTheme = settings.uiTheme || UITHEME_DEFAULT;
    }
    get camera() {
        return this.__internal__camera;
    }
    get apiType() {
        return this.__internal__apiType;
    }
    get apiUrl() {
        return this.__internal__apiUrl;
    }
    get i18nLang() {
        return this.__internal__i18nLang;
    }
    get icon() {
        return this.__internal__icon;
    }
    get notification() {
        return this.__internal__notification;
    }
    get ledgerConn() {
        return this.__internal__ledgerConn;
    }
    get locking() {
        return this.__internal__locking;
    }
    get metadataUp() {
        return this.__internal__metadataUp;
    }
    get prefix() {
        return this.__internal__prefix;
    }
    get storage() {
        return this.__internal__storage;
    }
    get uiMode() {
        return this.__internal__uiMode;
    }
    get uiTheme() {
        return this.__internal__uiTheme;
    }
    get availableCamera() {
        return CAMERA;
    }
    get availableCryptos() {
        return CRYPTOS;
    }
    get availableCryptosEth() {
        return CRYPTOS_ETH;
    }
    get availableCryptosLedger() {
        return CRYPTOS_LEDGER;
    }
    get availableIcons() {
        return ICONS;
    }
    get availableLedgerConn() {
        return LEDGER_CONN;
    }
    get availableLocking() {
        return LOCKING;
    }
    get availableMetadataUp() {
        return METADATA_UP;
    }
    get availableNodes() {
        return ENDPOINTS;
    }
    get availablePrefixes() {
        return PREFIXES;
    }
    get availableStorage() {
        return STORAGE;
    }
    get availableUIModes() {
        return UIMODES;
    }
    get availableUIThemes() {
        return UITHEMES;
    }
    get() {
        return {
            apiType: this.__internal__apiType,
            apiUrl: this.__internal__apiUrl,
            camera: this.__internal__camera,
            i18nLang: this.__internal__i18nLang,
            icon: this.__internal__icon,
            ledgerConn: this.__internal__ledgerConn,
            locking: this.__internal__locking,
            metadataUp: this.__internal__metadataUp,
            notification: this.__internal__notification,
            prefix: this.__internal__prefix,
            storage: this.__internal__storage,
            uiMode: this.__internal__uiMode,
            uiTheme: this.__internal__uiTheme
        };
    }
    set(settings) {
        this.__internal__apiType = settings.apiType || this.__internal__apiType;
        this.__internal__apiUrl = settings.apiUrl || this.__internal__apiUrl;
        this.__internal__camera = settings.camera || this.__internal__camera;
        this.__internal__ledgerConn = settings.ledgerConn || this.__internal__ledgerConn;
        this.__internal__i18nLang = settings.i18nLang || this.__internal__i18nLang;
        this.__internal__icon = settings.icon || this.__internal__icon;
        this.__internal__locking = settings.locking || this.__internal__locking;
        this.__internal__metadataUp = settings.metadataUp || this.__internal__metadataUp;
        this.__internal__notification = settings.notification || this.__internal__notification;
        this.__internal__prefix = isUndefined(settings.prefix) ? this.__internal__prefix : settings.prefix;
        this.__internal__storage = settings.storage || this.__internal__storage;
        this.__internal__uiMode = settings.uiMode || this.__internal__uiMode;
        this.__internal__uiTheme = settings.uiTheme || this.__internal__uiTheme;
        const newValues = this.get();
        store.set('settings', newValues);
        this.__internal__emitter.emit('change', newValues);
    }
    on(type, cb) {
        this.__internal__emitter.on(type, cb);
    }
}
export const settings = new Settings();
